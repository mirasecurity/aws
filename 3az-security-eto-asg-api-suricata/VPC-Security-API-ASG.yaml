AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - AvailabilityZone1
          - AvailabilityZone2
          - AvailabilityZone3
          - VpcCidr
          - MgmtPublicSubnet1Cidr
          - ToolSubnet1Cidr
          - ToolNLBIP1
          - ToolSubnet2Cidr
          - ToolNLBIP2
          - ToolSubnet3Cidr
          - ToolNLBIP3
      - Label:
          default: JumpBox Settings (optional)
        Parameters:
          - CreateJumpBox
          - JumpAmiId
      - Label:
          default: Security Groups and Keys
        Parameters:
          - KeyPairName
          - EbsKmsKey
          - AccessLocation
      - Label:
          default: Gateway Load Balancer Configuration
        Parameters:
          - ConnectionAcceptance
          - AwsAccountToWhitelist
      - Label:
          default: Decryptor Appliance Configuration
        Parameters:
          - DecryptorInstanceType
          - DecryptorAmiId
      - Label:
          default: Decryptor AutoScaling Setup
        Parameters:
          - DecryptorStartupWaitTime
          - DecryptorTerminatingWaitTime
          - ASGLambdaS3Bucket
          - ASGLambdaS3Key
          - DecryptorCASecretsID
          - DecryptorCertsSecretsKey
      - Label:
          default: IDS Tool Settings
        Parameters:
          - IDSInstanceType
          - IDSAmiId
          - IDSDiskSize

    ParameterLabels:
      VpcCidr:
        default: Network CIDR block for new VPC
      AvailabilityZone1:
        default: Availability Zone 1
      AvailabilityZone2:
        default: Availability Zone 2
      MgmtPublicSubnet1Cidr:
        default: Network CIDR for Mgmt Public Subnet 1 (AZ 1)
      ToolSubnet1Cidr:
        default: Network CIDR for Tool Subnet 1 (AZ 1)
      ToolSubnet2Cidr:
        default: Network CIDR for Tool Subnet 2 (AZ 2)
      ToolSubnet3Cidr:
        default: Network CIDR for Tool Subnet 3 (AZ 3)
      ToolNLBIP1:
        default: Network IP for Tool Subnet 1 NLB (AZ 1)
      ToolNLBIP2:
        default: Network IP for Tool Subnet 2 NLB (AZ 2)
      ToolNLBIP3:
        default: Network IP for Tool Subnet 3 NLB (AZ 3)
      CreateJumpBox:
        default: Create a jump box in public subnet to allow external access using it as socks proxy etc?
      JumpAmiId:
        default: AMI ID for JumpBox
      DecryptorInstanceType:
        default: Decryptor Appliance Instance Type
      DecryptorAmiId:
        default: AMI ID for Decryptor appliance
      IDSInstanceType:
        default: IDS Appliance Instance Type
      IDSAmiId:
        default: AMI ID for IDS appliance
      IDSDiskSize:
        default: IDS Disk Size in GB
      KeyPairName:
        default: SSH KeyPair required for accessing Appliance instance
      EbsKmsKey:
        default: KMS key for encrypting EC2 EBS volumes
      AccessLocation:
        default: Network CIDR to access Appliance instance
      ConnectionAcceptance:
        default: VPC Endpoint Service Acceptance Required Attribute
      AwsAccountToWhitelist:
        default: AWS Account to Whitelist for the Service
      DecryptorStartupWaitTime:
        default: Time to wait before sending traffic to new autoscaled Decryptor
      DecryptorTerminatingWaitTime:
        default: Time to wait after a Decryptor termination has been set, to allow existing GWLB flows to finish before shutting down Decryptor
      DecryptorCASecretsID:
        default: (OPTIONAL) CA PEM name within Secrets Manager that can be used for policy, if none defined, a new CA is generated
      DecryptorCertsSecretsKey:
        default: (OPTIONAL) Tag key name for Server Cert PEM items in Secrets Manager that should be imported into policy PKI list
      ASGLambdaS3Bucket:
        default: S3 Bucket where python script is stored
      ASGLambdaS3Key:
        default: S3 Key/FilePath in bucket where python script is stored

Parameters:
  VpcCidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 192.168.0.0/16
    Description: CIDR block for the VPC
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/y
  AvailabilityZone1:
    Description: Availability Zone to use for the Subnet 1 in the VPC
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Valid Availability Zone Id
    Default: ''
  AvailabilityZone2:
    Description: Availability Zone to use for the Subnet 2 in the VPC
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Valid Availability Zone Id
    Default: ''
  AvailabilityZone3:
    Description: Availability Zone to use for the Subnet 3 in the VPC
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Valid Availability Zone Id
    Default: ''
  MgmtPublicSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 192.168.0.0/24
    Description: CIDR block for the Mgmt Public Subnet 1 located in Mgmt Public Availability Zone 1
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  ToolSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 192.168.1.0/24
    Description: CIDR block for the Tool Subnet 1 located in Availability Zone 1
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  ToolSubnet2Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 192.168.2.0/24
    Description: CIDR block for the Tool Subnet 1 located in Availability Zone 2
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  ToolSubnet3Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 192.168.3.0/24
    Description: CIDR block for the Tool Subnet 1 located in Availability Zone 3
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  ToolNLBIP1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
    Default: 192.168.1.155
    Description: IP to assign to the Tool Subnet 1 NLB AZ 1
    Type: String
    ConstraintDescription: IP in the form x.x.x.x
  ToolNLBIP2:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
    Default: 192.168.2.155
    Description: IP to assign to the Tool Subnet 2 NLB AZ 2
    Type: String
    ConstraintDescription: IP in the form x.x.x.x
  ToolNLBIP3:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
    Default: 192.168.3.155
    Description: IP to assign to the Tool Subnet 3 NLB AZ 3
    Type: String
    ConstraintDescription: IP in the form x.x.x.x
  DecryptorAmiId:
    Type: "String"
    Default: ''
    Description: AMI id for Decryptor, can enter AMI e.g. ami-04430e6c2896054bd or Alias using SSM e.g. resolve:ssm:/aws/service/marketplace/prod-kta35rcxwwv4q/v2.2.0-2024.03.05-4176
  DecryptorInstanceType:
    Description: Select EC2 instance type for Decryptor Appliance instance.
    Default: c6i.2xlarge
    AllowedValues:
      - c6i.xlarge
      - c6i.2xlarge
      - c6i.4xlarge
      - c6i.8xlarge
      - c6in.xlarge
      - c6in.2xlarge
      - c6in.4xlarge
      - c6in.8xlarge
      - c7i.xlarge
      - c7i.2xlarge
      - c7i.4xlarge
      - c7i.8xlarge
    Type: String
  DecryptorTerminatingWaitTime:
    Type: "Number"
    Default: 60
  DecryptorStartupWaitTime:
    Type: "Number"
    Default: 200
  DecryptorCASecretsID:
    Type: "String"
    Default: ''
  DecryptorCertsSecretsKey:
    Type: "String"
    Default: ''
  ASGLambdaS3Bucket:
    Type: "String"
    Default: ''
  ASGLambdaS3Key:
    Type: "String"
    Default: ''
  IDSInstanceType:
    Description: Select EC2 instance type for IDS Appliance instance.
    Default: m6i.xlarge
    AllowedValues:
      - m6i.large
      - m6i.xlarge
      - c6in.2xlarge
    Type: String
  IDSAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'
  IDSDiskSize:
    Description: IDS instance disk size in GB. Default is set to 20GB
    Default: 20
    Type: Number
    ConstraintDescription: Should be a valid instance size in GB
  KeyPairName:
    Description: EC2 KeyPair required for accessing EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  EbsKmsKey:
    Description: Alias for KMS Key for encrypting EC2 instance
    Type: String
    Default: alias/aws/ebs
    ConstraintDescription: Must be the alias name of an existing KMS Key
  AccessLocation:
    Description: >-
      Enter desired Network CIDR to allow traffic to appliance. 0.0.0.0/0 to
      access from anywhere but it is not recommended
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    Type: String
    ConstraintDescription: Must be a valid Network CIDR of the form x.x.x.x/y
  ConnectionAcceptance:
    Description: >-
      Acceptance required for endpoint connection or not. Select true or
      false to either acceptance required or acceptance not required
      default is set to false: acceptance not required
    Default: "false"
    AllowedValues: ["true", "false"]
    Type: String
    ConstraintDescription: Must be true or false
  AwsAccountToWhitelist:
    Description: >-
      Enter ARN of one or more prinicapls: IAM user, IAM roles and AWS accounts.
      To grant permissions to all principals, specify an asterisk (*).
      example: arn:aws:iam::112233445566:user1
    Type: String
    Default: "*"
    ConstraintDescription: Must be a valid AWS ARN of one or more principals
  CreateJumpBox:
    Description: >-
      Create a JumpBox EC2?
    Type: String
    Default: "Yes"
    AllowedValues: ["Yes", "No"]
    ConstraintDescription: Must be a valid option Yes or No
  JumpAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'
Conditions:
  CreateJumpBoxCondition: !Equals
    - !Ref CreateJumpBox
    - "Yes"

Resources:
# Appliance/Security VPC:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sec-vpc"
# IGW associated with Appliance VPC:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw-1"
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

# NAT GW to provide internet to Lambda and Private Decryptor IPs:
  NATGateway:
     Type: AWS::EC2::NatGateway
     Properties:
        AllocationId: !GetAtt NATGatewayEIP.AllocationId
        SubnetId: !Ref MgmtPublicSubnet1
  NATGatewayEIP:
     Type: AWS::EC2::EIP
     Properties:
        Domain: vpc

# Subnets:
  MgmtPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref MgmtPublicSubnet1Cidr
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-mgmt-sub-1"
  ToolSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref ToolSubnet1Cidr
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-tool-sub-1"
  ToolSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref ToolSubnet2Cidr
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-tool-sub-2"
  ToolSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref ToolSubnet3Cidr
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-tool-sub-3"
# Private Route Tables:
  ToolRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-tool-rtb-1"
  ToolRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref ToolRouteTable
  ToolSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ToolSubnet1
      RouteTableId: !Ref ToolRouteTable
  ToolSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ToolSubnet2
      RouteTableId: !Ref ToolRouteTable
  ToolSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ToolSubnet3
      RouteTableId: !Ref ToolRouteTable
# Public Route Tables:
  DecryptorMgmtPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-mgmt-rtb-1"
  DecryptorMgmtPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref DecryptorMgmtPublicRouteTable
  MgmtPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MgmtPublicSubnet1
      RouteTableId: !Ref DecryptorMgmtPublicRouteTable

# Security Group:
  MgmtSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: !Sub "${AWS::StackName}-sg-mgmt"
      GroupDescription: >-
        Access to Appliance instance: allow SSH, HTTPS and ICMP access from desired CIDR.
        Allow all traffic from VPC CIDR
      SecurityGroupIngress:
        - CidrIp: !Ref AccessLocation
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: !Ref AccessLocation
          IpProtocol: ICMP
          FromPort: -1
          ToPort: -1
        - CidrIp: !Ref AccessLocation
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Ref AccessLocation
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: !Ref VpcCidr
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sg-mgmt"

  ApplianceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: !Sub "${AWS::StackName}-app-sg-mgmt"
      GroupDescription: >-
        Allow all traffic from VPC CIDR
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCidr
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-app-sg-mgmt"

  ApplianceSgPlaintext:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: !Sub "${AWS::StackName}-dpath-sg-1"
      GroupDescription: >-
        Access access from Tool CIDRs
      SecurityGroupIngress:
        - CidrIp: !Ref ToolSubnet1Cidr
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
        - CidrIp: !Ref ToolSubnet2Cidr
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
        - CidrIp: !Ref ToolSubnet3Cidr
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      SecurityGroupEgress:
        - CidrIp: !Ref ToolSubnet1Cidr
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
        - CidrIp: !Ref ToolSubnet2Cidr
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
        - CidrIp: !Ref ToolSubnet3Cidr
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-dpath-sg-1"

# Gateway Load Balancer (GWLB), Target Group, Listener
  Gwlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-gwlb-1"
      Type: gateway
      Subnets:
        - !Ref ToolSubnet1
        - !Ref ToolSubnet2
        - !Ref ToolSubnet3
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-gwlb-1"

  # Target Group:
  DecryptorTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-Decryptor-tg-1"
      Port: 6081
      Protocol: GENEVE
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 20
      VpcId: !Ref Vpc
      HealthCheckPort: 80
      HealthCheckProtocol: "TCP"
      TargetType: instance
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-tg-1"

  # Listener:
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DecryptorTargetGroup
      LoadBalancerArn: !Ref Gwlb

  DecryptorLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-Decryptor-Template'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !Ref ApplianceSgPlaintext
            DeleteOnTermination: true
            Description: Decryptor-plaintext-tunnels
            SubnetId: !Ref ToolSubnet1
          - DeviceIndex: 1
            Groups:
              - !Ref ApplianceSg
            DeleteOnTermination: true
            Description: Decryptor-management
            SubnetId: !Ref MgmtPublicSubnet1
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 120
              VolumeType: 'gp3'
              Iops: '3000'
              Encrypted: True
              KmsKeyId: !Ref EbsKmsKey
        UserData:
          Fn::Base64: |
            #cloud-config
        Placement:
          Tenancy: default
        ImageId: !Ref DecryptorAmiId
        InstanceType: !Ref DecryptorInstanceType
        KeyName: !Ref KeyPairName
        EbsOptimized: True

  DecryptorASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: '0'
      MinSize: '0'
      DesiredCapacity: '0'
      LaunchTemplate:
        LaunchTemplateId: !Ref DecryptorLaunchTemplate
        Version: !GetAtt DecryptorLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref ToolSubnet1
        - !Ref ToolSubnet2
        - !Ref ToolSubnet3
      TargetGroupARNs:
      - !Ref DecryptorTargetGroup
      LifecycleHookSpecificationList: # on Decryptor termination, wait X seconds to let existing flows finish
        - LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
          LifecycleHookName: DecryptorTerminatingHook
          DefaultResult: CONTINUE
          HeartbeatTimeout: !Ref DecryptorTerminatingWaitTime
        - LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
          LifecycleHookName: DecryptorLaunchingHook
          DefaultResult: CONTINUE
          HeartbeatTimeout: !Ref DecryptorStartupWaitTime
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ASG-Decryptor'
          PropagateAtLaunch: true
        - Key: Purpose
          Value: DecryptorServerGroup
          PropagateAtLaunch: false

  IDSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - !Sub 'ec2.${AWS::URLSuffix}'

  IDSRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref IDSRole

  TargetSuricataTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-IDS-Template'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !Ref ApplianceSgPlaintext
              - !Ref ApplianceSg
            DeleteOnTermination: true
            Description: IDS-plaintext-tunnels
            SubnetId: !Ref MgmtPublicSubnet1
        ImageId: !Ref IDSAmiId
        KeyName: !Ref KeyPairName
        InstanceType: !Ref IDSInstanceType
        IamInstanceProfile:
          Arn: !GetAtt
            - IDSRoleProfile
            - Arn
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref IDSDiskSize
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            add-apt-repository ppa:oisf/suricata-stable
            apt update -y
            apt install -y suricata
            sed -i '/^'af-packet'/,/^[   ]*$/{/'"interface:"'/s/\('interface:'\)\(.*$\)/\1'" ens5"'/}' /etc/suricata/suricata.yaml
            cat > /etc/suricata/disable.conf<< 'EOF'
            2013926 # DISABLE PT on 443 RULES
            2013927
            2013928
            2013929
            2013930
            2013931
            EOF
            suricata-update -f
            systemctl restart suricata

            apt install -y apache2
            systemctl enable apache2
            systemctl start apache2

            wget https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            dpkg -i amazon-cloudwatch-agent.deb
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
            {
              "agent": {
                "metrics_collection_interval": 30,
                "run_as_user": "cwagent"
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {"file_path": "/var/log/suricata/fast.log", "log_group_name": "/${AWS::StackName}/suricata/fast"},
                      {"file_path": "/var/log/suricata/eve.json", "log_group_name": "/${AWS::StackName}/suricata/eve"}
                    ]
                  }
                }
              }
            }
            EOF
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s \
              -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

  IDSASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 0
      MaxSize: 0
      DesiredCapacity: '0'
      LaunchTemplate:
        LaunchTemplateId: !Ref TargetSuricataTemplate
        Version: !GetAtt TargetSuricataTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref IDSTargetGroup
      VPCZoneIdentifier:
        - !Ref ToolSubnet1
        - !Ref ToolSubnet2
        - !Ref ToolSubnet3
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-IDS-asg"
        PropagateAtLaunch: true

  MiraStackSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Tokens and Passwords for Mira Central Manager and Decryptor"
      Name: !Sub "${AWS::StackName}-Mira-Secrets"
      GenerateSecretString:
        SecretStringTemplate: '{"user": "admin"}'
        GenerateStringKey: "Decryptorpassword" # Cloudformation autogenerates a unique password
        PasswordLength: 15
        RequireEachIncludedType: True
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ETO-PW'

  JumpBox:
    Type: AWS::EC2::Instance
    Condition: CreateJumpBoxCondition
    Properties:
      ImageId: !Ref JumpAmiId
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "MgmtSg"
          SubnetId:
            Ref: "MgmtPublicSubnet1"
      InstanceType: 't3.micro'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            VolumeType: 'gp3'
            Iops: '3000'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-JumpBox"

# VPC Endpoint Service using GWLB ARN:
  VpcEndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      GatewayLoadBalancerArns:
        - !Ref Gwlb
      AcceptanceRequired: !Ref ConnectionAcceptance

  VpcEndpointServicePermissions:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties:
      AllowedPrincipals:
        - !Ref AwsAccountToWhitelist
      ServiceId: !Ref VpcEndpointService

  # Lambda Role and Policy and Log Group to check for Decryptor spinning up
  EnrollASGRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-enrollasg-lambda-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:StopInstances
                  - secretsmanager:*
                Resource: "*"

  # Custom lambda to set up Decryptor Policies:
  ManageETONodesAutoscaling:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "bravado_setup_eto.lambda_handler"
      Role: !GetAtt
        - EnrollASGRole
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref ApplianceSg
        SubnetIds:
          - !Ref ToolSubnet1
          - !Ref ToolSubnet2
          - !Ref ToolSubnet3
      Environment:
        Variables:
          ETOASGNAME: !Ref DecryptorASG
          SecretsId: !Sub "${AWS::StackName}-Mira-Secrets"
          CASecretsId: !Ref DecryptorCASecretsID
          CertsSecretsTag: !Ref DecryptorCertsSecretsKey
          Region: !Sub "${AWS::Region}"
          NLB_IPs: !Sub '{ "${AvailabilityZone1}": "${ToolNLBIP1}", "${AvailabilityZone2}": "${ToolNLBIP2}","${AvailabilityZone3}": "${ToolNLBIP3}" }'
      Code:
          S3Bucket: !Ref ASGLambdaS3Bucket
          S3Key: !Ref ASGLambdaS3Key
      Runtime: python3.12
      Timeout: 900

  # use event bridge to watch for a log event with ASG prefix, trigger lambda to analyze asg event
  EventRule1:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        detail:
          AutoScalingGroupName:
            - prefix: !Ref DecryptorASG
      Name: !Sub "${AWS::StackName}-ETO-Autoscaling-event-detect"
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - ManageETONodesAutoscaling
            - Arn
          Id: Id1225

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "ManageETONodesAutoscaling"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "EventRule1"
          - "Arn"

# Optional Code to provide VPCe endpoint in cloudformation stack outputs to help user link endpoint VPCs into it
# Lambda Role and Policy and Log Group for describing VPC endpoint service:
  VPCeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-vpce-lambda-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcEndpointServiceConfigurations
                  - ec2:DescribeVpcEndpointServicePermissions
                  - ec2:DescribeVpcEndpointServices
                Resource: "*"

  # Custom resource to retrieve VPC endpoint service name:
  DescribeVpceService:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: !GetAtt
        - VPCeLambdaExecutionRole
        - Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging
          def handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              responseData = {}
              responseStatus = cfnresponse.FAILED
              logger.info('Received event: {}'.format(json.dumps(event)))
              if event["RequestType"] == "Delete":
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
              if event["RequestType"] == "Create":
                  try:
                      VpceServiceId = event["ResourceProperties"]["Input"]
                  except Exception as e:
                      logger.info('VPC Endpoint Service Id retrival failure: {}'.format(e))
                  try:
                      ec2 = boto3.client('ec2')
                  except Exception as e:
                      logger.info('boto3.client failure: {}'.format(e))
                  try:
                      response = ec2.describe_vpc_endpoint_service_configurations(
                          Filters=[
                              {
                                  'Name': 'service-id',
                                  'Values': [VpceServiceId]
                              }
                          ]
                      )
                  except Exception as e:
                      logger.info('ec2.describe_vpc_endpoint_service_configurations failure: {}'.format(e))
                  ServiceName = response['ServiceConfigurations'][0]['ServiceName']
                  responseData['Data'] = ServiceName
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
      Runtime: python3.10
      Timeout: 30

  VpceServiceName:
    Type: Custom::DescribeVpcEndpointServiceConfigurations
    Properties:
      ServiceToken: !GetAtt DescribeVpceService.Arn
      Input: !Ref VpcEndpointService

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-" , [!Ref 'AWS::StackName', Tool, NLB]]
      Scheme: internal
      SubnetMappings:
       - SubnetId: !Ref ToolSubnet1
         PrivateIPv4Address: !Ref ToolNLBIP1
       - SubnetId: !Ref ToolSubnet2
         PrivateIPv4Address: !Ref ToolNLBIP2
       - SubnetId: !Ref ToolSubnet3
         PrivateIPv4Address: !Ref ToolNLBIP3
      Type: network
  IDSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-" , [!Ref 'AWS::StackName', IDS, Target]]
      Port: 4789
      Protocol: UDP
      VpcId: !Ref Vpc
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 22
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: instance
  NetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref IDSTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: '4789'
      Protocol: UDP

# Outputs
Outputs:
  ApplianceVpcCidr:
    Description: Appliance VPC CIDR
    Value: !Ref VpcCidr
  ApplianceVpcId:
    Description: Appliance VPC ID
    Value: !Ref Vpc
  ApplianceVpcEndpointServiceName:
    Description: Appliance VPC Endpoint Service Name. Required to create GWLB Endpoint
    Value: !GetAtt VpceServiceName.Data
