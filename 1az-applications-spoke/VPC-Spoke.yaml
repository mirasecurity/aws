AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - AvailabilityZone1
          - VpcCidr
      - Label:
          default: Gateway Load Balancer Endpoint Configuration
        Parameters:
          - GwlbeSubnet1Cidr
          - ServiceName
      - Label:
          default: Security Groups and Keys for Endpoint Servers
        Parameters:
          - KeyPairName
          - AccessLocation
      - Label:
          default: Common Endpoint Servers Configuration
        Parameters:
          - ApplicationInstanceType
          - ApplicationAmiId
          - ApplicationInstanceDiskSize
      - Label:
          default: Application 1 Webserver Configuration
        Parameters:
          - ApplicationSubnet1Cidr
      - Label:
          default: Application 2 Proxy Configuration
        Parameters:
          - ApplicationSubnet2Cidr
          - SquidUser
          - SquidPass

    ParameterLabels:
      VpcCidr:
        default: Network CIDR block for new VPC
      AvailabilityZone1:
        default: Public Availability Zone 1
      ApplicationSubnet1Cidr:
        default: Network CIDR for Application 1 Subnet
      ApplicationSubnet2Cidr:
        default: Network CIDR for Application 2 Subnet
      GwlbeSubnet1Cidr:
        default: Network CIDR for GWLBE Subnet 1
      ApplicationInstanceType:
        default: Application Instance Type
      ApplicationAmiId:
        default: Latest AMI ID for application (ec2 instance)
      ApplicationInstanceDiskSize:
        default: Application Instance Size in GB
      KeyPairName:
        default: KeyPair required for accessing Application instance
      AccessLocation:
        default: Network CIDR to access Application instance
      ServiceName:
        default: The name of the endpoint service to create gateway load balancer endpoint for
      SquidUser:
        default: Username (Squid Proxy)
      SquidPass:
        default: Username (Squid Proxy)

Parameters:
  VpcCidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 10.0.0.0/24
    Description: CIDR block for the VPC
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/25
  AvailabilityZone1:
    Description: Availability Zone to use for the Public Subnet 1 in the VPC
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Valid Availability Zone Id
    Default: ''
  GwlbeSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 10.0.0.0/27
    Description: CIDR block for the GWLBE Subnet 1 located in Availability Zone 1
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  ApplicationSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 10.0.0.32/27
    Description: CIDR block for the Application Subnet 1 located in Availability Zone 1
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  ApplicationSubnet2Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 10.0.0.64/27
    Description: CIDR block for the Application Subnet 2 located in Availability Zone 1
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  ApplicationInstanceType:
    Description: Select EC2 instance type for Endpoint instance.
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - c6i.xlarge
      - c6in.2xlarge
    Type: String
  ApplicationAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'
  ApplicationInstanceDiskSize:
    Description: Application instance disk size in GB. Default is set to 20GB
    Default: 20
    Type: Number
    ConstraintDescription: Should be a valid instance size in GB
  KeyPairName:
    Description: EC2 KeyPair required for accessing EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  AccessLocation:
    Description: >-
      Enter desired Network CIDR to access Host. Default is set to
      access from anywhere (0.0.0.0/0) and it is not recommended
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    Type: String
    ConstraintDescription: Must be a valid Network CIDR of the form x.x.x.x/y
  ServiceName:
    Description: >-
      Enter the name of the service for which you want to create gateway load balancer endpoint.
      Example service name: com.amazonaws.vpce.us-west-2.vpce-svc-0a76331bc5d6cc4cd
    Type: String
    ConstraintDescription: Must be a valid service name
  SquidUser:
    Description: >-
      Enter the username of the squid proxy service that will be used for authentication by clients
    Type: String
    Default: user
  SquidPass:
    Description: >-
      Enter the password of the squid proxy service that will be used for authentication by clients
    Default: GreenPenguin7
    Type: String

Resources:
# Endpoint VPC:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EndPoints-VPC"

# IGW associated with Endpoints VPC:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw-1"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

# GWLB Subnet 1:
  GwlbeSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref GwlbeSubnet1Cidr
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-gwlbe-subnet-1"

# App Subnet 1:
  ApplicationSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref ApplicationSubnet1Cidr
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Endpoints-subnet-1"

# App Subnet 2:
  ApplicationSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref ApplicationSubnet2Cidr
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Endpoints-subnet-2"

# App 1 Route Table and subnet association:
  ApplicationRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-endpoint-rtb-1"

# App 2 Route Table and subnet association:
  ApplicationRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-endpoint-rtb-2"

  ApplicationSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet1
      RouteTableId: !Ref ApplicationRouteTable1

  ApplicationSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet2
      RouteTableId: !Ref ApplicationRouteTable2

  GwlbeRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-gwlbe-rtb-1"

  GwlbeRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref GwlbeRouteTable1

  GwlbeSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref GwlbeSubnet1
      RouteTableId: !Ref GwlbeRouteTable1

  # Ingress Route Table and association:
  IgwRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Join
            - ""
            - - !Ref AWS::StackName
              - "-igw-rtb1"

  IgwRouteTableAssociation:
    Type: AWS::EC2::GatewayRouteTableAssociation
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref IgwRouteTable1

# Security Group:
  ApplicationSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: !Sub "${AWS::StackName}-application-sg-1"
      GroupDescription: >-
        Access to application instance: allow TCP, UDP and ICMP from appropriate location.
        Allow all traffic from VPC CIDR.
      SecurityGroupIngress:
        - CidrIp: !Ref AccessLocation
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: !Ref AccessLocation
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Ref AccessLocation
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: !Ref AccessLocation
          IpProtocol: tcp
          FromPort: 3128
          ToPort: 3218
        - CidrIp: !Ref AccessLocation
          IpProtocol: ICMP
          FromPort: -1
          ToPort: -1
        - CidrIp: !Ref VpcCidr
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-application-sg-1"

# EC2 Instances
  Application1Web:
    DependsOn:
    - AddRoute1ApplicationRouteTable1
    - AddApplication1IgwRouteTable
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ApplicationAmiId
      KeyName: !Ref KeyPairName
      InstanceType: !Ref ApplicationInstanceType
      SecurityGroupIds:
        - !Ref ApplicationSg
      SubnetId: !Ref ApplicationSubnet1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref ApplicationInstanceDiskSize
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-endpoint-1-nginx"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          # Configure hostname:
          hostnamectl set-hostname ${AWS::StackName}-endpoint-1-nginx;
          # Configure SSH client alive interval for ssh session timeout:
          echo 'ClientAliveInterval 60' | sudo tee --append /etc/ssh/sshd_config;
          service sshd restart;

          # Install packages:
          sudo apt update
          sudo apt -y install nginx
          mkdir /etc/pki
          mkdir /etc/pki/nginx
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/pki/nginx/server.key -out /etc/pki/nginx/server.crt -subj '/CN=localhost'
          echo "    server {
              listen       443 ssl;
              listen       [::]:443 ssl;
              server_name  _;
              root         /var/www/html;

              ssl_certificate "/etc/pki/nginx/server.crt";
              ssl_certificate_key "/etc/pki/nginx/server.key";
              ssl_session_cache shared:SSL:1m;
              ssl_session_timeout  10m;
              ssl_ciphers HIGH;
              ssl_prefer_server_ciphers on;
              }" > /etc/nginx/sites-enabled/default
          echo "<html>This is ${AWS::StackName}-endpoint-1-nginx</html>" > /var/www/html/index.html
          systemctl restart nginx

  Application2Proxy:
    DependsOn:
    - AddRoute1ApplicationRouteTable2
    - AddApplication2IgwRouteTable
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ApplicationAmiId
      KeyName: !Ref KeyPairName
      InstanceType: !Ref ApplicationInstanceType
      SecurityGroupIds:
        - !Ref ApplicationSg
      SubnetId: !Ref ApplicationSubnet2
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref ApplicationInstanceDiskSize
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-endpoint-2-proxy"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          # Configure hostname:
          hostnamectl set-hostname ${AWS::StackName}-endpoint-2-proxy;
          # Configure SSH client alive interval for ssh session timeout:
          echo 'ClientAliveInterval 60' | sudo tee --append /etc/ssh/sshd_config;
          service sshd restart;
          # Install packages:
          sudo apt update
          sudo apt -y install squid
          echo "auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwords
          auth_param basic realm proxy
          # Deny requests to proxy aws instance metadata
          acl instance_metadata dst 169.254.169.254
          http_access deny instance_metadata
          acl authenticated proxy_auth REQUIRED
          http_access allow authenticated
          http_port 3128" > /etc/squid/squid.conf
          apt -y install apache2-utils; htpasswd -bc /etc/squid/passwords ${SquidUser} ${SquidPass}
          systemctl restart squid

# Gateway Load Balancer endpoints:
  GwlbVpcEndpoint1:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Ref ServiceName
      VpcEndpointType: GatewayLoadBalancer
      SubnetIds:
        - !Ref GwlbeSubnet1

# Add routes to route tables:
  # Setup Application 1 Route Table
  # default route with GWLBE 1 as target from application-rtb-1
  AddRoute1ApplicationRouteTable1:
    Type: AWS::EC2::Route
    DependsOn: GwlbVpcEndpoint1
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId: !Ref GwlbVpcEndpoint1
      RouteTableId: !Ref ApplicationRouteTable1

  # default route with GWLBE 1 as target from application-rtb-1 to application-rtb-2
  AddRoute1ApplicationRouteTable1b:
    Type: AWS::EC2::Route
    DependsOn: GwlbVpcEndpoint1
    Properties:
      DestinationCidrBlock: !Ref ApplicationSubnet2Cidr
      VpcEndpointId: !Ref GwlbVpcEndpoint1
      RouteTableId: !Ref ApplicationRouteTable1

  # subnet 2
  # default route with GWLBE 1 as target from application-rtb-2
  AddRoute1ApplicationRouteTable2:
    Type: AWS::EC2::Route
    DependsOn: GwlbVpcEndpoint1
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId: !Ref GwlbVpcEndpoint1
      RouteTableId: !Ref ApplicationRouteTable2

  # default route with GWLBE 1 as target from application-rtb-2 to application-rtb-1
  AddRoute1ApplicationRouteTable2b:
    Type: AWS::EC2::Route
    DependsOn: GwlbVpcEndpoint1
    Properties:
      DestinationCidrBlock: !Ref ApplicationSubnet1Cidr
      VpcEndpointId: !Ref GwlbVpcEndpoint1
      RouteTableId: !Ref ApplicationRouteTable2

  # Setup IGW Route Table
  # GWLBE as target for ingress route table to application-rtb-1:
  AddApplication1IgwRouteTable:
    Type: AWS::EC2::Route
    DependsOn: GwlbVpcEndpoint1
    Properties:
      DestinationCidrBlock: !Ref ApplicationSubnet1Cidr
      VpcEndpointId: !Ref GwlbVpcEndpoint1
      RouteTableId: !Ref IgwRouteTable1

  # GWLBE as target for ingress route table to application-rtb-2:
  AddApplication2IgwRouteTable:
    Type: AWS::EC2::Route
    DependsOn: GwlbVpcEndpoint1
    Properties:
      DestinationCidrBlock: !Ref ApplicationSubnet2Cidr
      VpcEndpointId: !Ref GwlbVpcEndpoint1
      RouteTableId: !Ref IgwRouteTable1

# Outputs:
Outputs:
  EndpointsVpcCidr:
    Description: Endpoints VPC CIDR
    Value: !Ref VpcCidr
  EndpointsVpcId:
    Description: Endpoints VPC ID
    Value: !Ref Vpc
  EndpointsGwlbVpcEndpoint1Id:
    Description: Gateway Load Balancer VPC Endpoint 1 ID
    Value: !Ref GwlbVpcEndpoint1

